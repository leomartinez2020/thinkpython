El Camino del Programador
*************************

El objetivo de este libro es enseñarle a cómo pensar como un experto informático. Esta forma de pensamiento combina algunas de las mejores características de las matemáticas, la ingeniería y las ciencias naturales. Tal como los matemáticos, los informáticos usan lenguajes formales para señalar ideas (específicamente cómputos). Tal como los ingenieros, ellos diseñan cosas, uniendo componentes para crear sistemas y evaluando ventajas y desventajas de las alternativas. Tal como los científicos, ellos observan el comportamiento de sistemas complejos, crean hipótesis y confirman predicciones.

La única habilidad más importante para un informático es **la habilidad de resolver de problemas**. Resolver problemas implica la habilidad de formular problemas, pensar creativamente acerca de las soluciones y expresar una solución clara y precisa. Resulta que el proceso de aprender a programar es una oportunidad excelente de practicar la resolución de problemas. Por eso, este capítulo se titula “El camino del programador”.

Por un lado usted va aprender a programar, una habilidad útil por sí misma. Por otro lado, usted va a usar la programación como un medio para llegar a un fin. A medida que avanzamos el fin será más claro.


¿Qué es un programa?
====================

Un **programa** es una secuencia de instrucciones que específica cómo llevar a cabo un cálculo. El cálculo puede ser algo matemático como resolver un sistema de ecuaciones o encontrar las raíces de un polinomio, pero también puede ser un cálculo simbólico como buscar y reemplazar texto en un documento o (aunque suene extraño) compilar un programa.

Los detalles son diferentes en lenguajes diferente pero hay algunas instrucciones básicas que aparecen en casi cada lenguaje:

**Entrada**: datos obtenidos del teclado, un archivo, u otro aparato tal como un sensor.

**Salida**: datos mostrados en la pantalla o enviar datos a un archivo u otro aparato tal como un motor.

**Matemáticas**: operaciones matemáticas básicas como la adición y la multiplicación.

**Ejecución condicional**: revisión de ciertas condiciones y ejecución de una  secuencia adecuada de declaraciones.

**Repetición**: realización de una acción repetidamente, generalmente con alguna variación.

Aunque sea difícil de creer, eso es todo lo que se tiene. Cada programa alguna vez utilizado sin importar lo complicado, está hecho de
instrucciones que se ven más o menos así. De esta forma podemos describir la programación como el proceso de dividir una tarea grande y 
compleja en subtareas cada vez más pequeñas hasta que las subtareas son lo suficientemente simples para ser ejecutadas con secuencias
compuestas de estas instrucciones básicas.

El Proceso de Ejecución de Python
=================================

Uno de los desafíos de comenzar con Python es que es necesario instalar Python o software relacionado en el computador.
Si se está familiarizado con el sistema operativo y sobretodo si se está cómodo con la línea de comandos, no se tendrán
problemas para instalar Python. Pero en el caso de los principiantes puede ser pesado aprender acerca de administración
de sistemas y programación al mismo tiempo.

Para evitar ese problema, yo recomiendo que se ejecute Python en el navegador. Cuando se tenga cierta comodidad con
Python señalaré cómo instalarlo en el computador.

Hay varias páginas que se pueden usar para correr Python. Si ya se tiene una favorita, hay que usarla. De otra forma, recomiendo
PYthonAnywhere. Tengo instrucciones muy detalladas para comenzar en http://tinyurl.com/thinkpython2e.



¿Qué es depuración?
===================

La programación es un proceso complejo y por ser hecho por seres humanos a menudo lleva a errores.
El proceso de búsqueda y corrección de errores de programación se conoce como **depuración**. 

Se pueden tener tres tipos de errores en los programas: error sintáctico, error de tiempo de ejecución y error semántico. Es bueno diferenciarlos para ubicarlos más rápidamente

Errores sintácticos
===================

Python sólo puede ejecutar un programa si el programa es sintácticamente correcto; de otra forma el proceso falla y devuelve un mensaje de error.
La **sintaxis** se refiere a la estructura del programa y las reglas acerca de esa estructura. Por ejemplo, en español
una oración debe comenzar con una letra mayúscula y terminar con un punto. esta oración contiene un **error sintáctico**. Lo mismo que ésta

Para la mayoría de los lectores, unos cuantos errores sintácticos no son un problema significativo por lo que podemos leer
algunas obras de Saramago sin problemas (no usa signos de puntuación). Python no es tan indulgente. Si hay un solo error sintáctico en cualquier parte del programa, Python muestra un mensaje de error y se detiene
y el programa no se ejecuta. Durante las primeras semanas de una formación en programación probablemente se pierda mucho tiempo buscando errores sintácticos.
A medida que se adquiere experiencia se cometen menos errores y se identifican más rápido.

Errores de tiempo ejecución
===========================

El segundo tipo de error es el error de tiempo ejecución llamado así porque no aparece sino hasta cuando se ejecuta
el programa. Estos errores también se conocen como **excepciones** porque generalmente indican que ocurrió
algo excepcional.

Los errores de  tiempo de ejecución son raros en los programas sencillos que se encontraran en los primeros 
capítulos de modo que podría pasar mucho tiempo antes de encontrar uno.

Errores Semánticos
==================

El tercer tipo de error es el **error semántico**. Si hay uno de estos en un programa, se va a ejecutar el programa 
normalmente en el sentido de que el computador no va a generar ningún mensaje de error, pero no va a hacer lo
correcto.

El problema es que el programa escrito no es el programa que se quería escribir. El sentido del programa (su semántica) es 
incorrecto. Identificar los errores semánticos pude ser complicado porque requiere que se trabaje hacia atrás
examinando el resultado del programa y tratando de adivinar qué está haciendo.

Depuración experimental
=======================

Una de las más importantes habilidades a adquirir es la depuración. Aun cuando pude ser frustrante, la depuración es una de las partes
de la programación más ricas, desafiantes e interesantes intelectualmente.

De cierta forma, la depuración es como un trabajo detectivesco. Uno es confrontado con pistas y de allí tiene que inferir los procesos
y eventos que llevaron a los resultados dados.

La depuración es también como una ciencia experimental. Una vez se tiene una idea de qué 
es lo que va mal, uno modifica el programa y prueba de nuevo. Si la hipótesis fue correcta,
entonces se puede predecir el resultado de la modificación y uno se acerca a un programa
funcional. Si la hipótesis fue incorrecta, hay que plantear una nueva. Como indicó Sherlock Holmes,
cuando se ha eliminado lo imposible, lo que queda aunque improbable, debe ser la verdad. (A. Conan Doyle, *El Signo de los de Cuatro*)

Para algunas personas programar y depurar son la misma cosa. O sea, programar es el proceso de depuración gradual hasta que el programa hace
lo que se le pide. La idea es que se debe comenzar con un programa que hace *algo* y luego hacer pequeñas modificaciones,
depurándolas en el proceso de modo que se tenga un programa funcional.

Por ejemplo, Linux es el núcleo de un  sistema operativo que contiene millones de líneas de código pero que comenzó como un programa
simple que Linus Torvalds usó para explorar el chip 80386 de Intel. De acuerdo a Larry Greenfield, uno de los proyectos iniciales de Linus fue
un programa que podía alternar de AAAA a BBBB en la pantalla. Esto se transformó más tarde en Linux (*The Linux User's Guide* Beta Version 1).

Los capítulos siguientes darán más sugerencias de depuración y otras prácticas de programación.

Los lenguajes formales y naturales
===================================

**Los lenguajes naturales** son los lenguajes que la gente habla como el inglés, el español, el francés. No fueron diseñados por personas
(aunque las personas tratan de imponer algún orden en ellos); ellos evolucionaron naturalmente.   

**Los lenguajes formales** son lenguajes diseñados por personas para aplicaciones específicas. Por ejemplo, las notaciones
que los matemáticos usan en un lenguaje formal que es particularmente bueno para indicar relaciones entre números y símbolos.
Los químicos usan un lenguaje formal para representar la estructura química de las moléculas. Y más importante:

    *Los lenguajes de programación son lenguajes formales que han sido diseñados para expresar cómputos.* 

Los lenguajes formales tienden a tener reglas estrictas de sintaxis. Por ejemplo, 3+3=6 es un enunciado matemático sintácticamente correcto, pero 3=+6$ no lo es.
H\ :sub:`2`\ O es un nombre químico sintácticamente correcto, pero \ :sub:`2`\Zz no lo es. 

Las reglas sintácticas vienen en dos sabores relacionados con **componentes léxicos o lexemas** (tokens) y la estructura. Los componentes léxicos son los elementos básicos del lenguaje tales como palabras, números, paréntesis, comas, etc.
En Python, un enunciado como: ``print("Feliz año nuevo ", 2013)``  tiene 6 componentes léxicos: el nombre de la función, un paréntesis abierto, una cadena de caracteres, una coma, un número y un paréntesis cerrado.

Es posible cometer errores en la forma como uno construye lexemas. Uno de los problemas con 3=+6$ es que $ no es un lexema legal en matemáticas (al menos hasta donde sabemos). Similarmente,
\ :sub:`2`\Zz no es un lexema legal en la notación química porque no hay un elemento con la abreviatura Zz.

La segunda parte de las reglas sintácticas está relacionada con la **estructura** de un enunciado, es decir, la forma como los lexemas están organizados.
El enunciado 3=+6$ es estructuralmente ilegal porque no se puede colocar un signo más inmediatamente después de un signo igual. De forma similar, las fórmulas moleculares
deben tener subíndices después del nombre del elemento, no antes. Y en nuestro ejemplo Python, si omitiéramos la coma, o si intercambiáramos los dos paréntesis para decir
``print)"Feliz año nuevo ", 2013(`` nuestro enunciado todavía tendría seis lexemas válidos y legales, pero la estructura sería ilegal.

Cuando se lee una oración en español o un enunciado en un lenguaje formal, hay que descifrar cuál es la estructura de la oración (aunque en un lenguaje natural uno hace esto de forma inconsciente).
Este proceso se llama **análisis léxico** (parsing).
